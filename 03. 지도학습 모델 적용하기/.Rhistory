result
Encoding(result) <- "UTF-8"
result
reqUrl
etcString <- "&display=100%start=1&sort=sim"
reqUrl <- paste(urlStr, searchString, etcString, sep="")
reqUrl
library(httr)
clientid <- "lu8wGw610yc3_BMstlCx"
clientSecret <- "7geOU5dRoC"
apiResult <- GET(reqUrl, add_headers("X-Naver-Client-Id"=clientid,
"X-Naver-Client-Secret"=clientSecret))
apiResult
str(apiResult)
apiResult$content
clientSecret <- "bBJso4WGrc"
apiResult <- GET(reqUrl, add_headers("X-Naver-Client-Id"=clientid,
"X-Naver-Client-Secret"=clientSecret))
apiResult
str(apiResult)
apiResult
result
apiResult$content
apiResult
apiResult #
etcString <- "&display=100&start=1&sort=sim"
reqUrl <- paste(urlStr, searchString, etcString, sep="")
reqUrl # 요청할 url 생성
library(httr)
clientid <- "d7xj3My8sotG_4w0nWvk" # 개인 api id 값
clientSecret <- "LnbEd9az08" # 개인 apu secret 값
apiResult <- GET(reqUrl, add_headers("X-Naver-Client-Id"=clientid,
"X-Naver-Client-Secret"=clientSecret))
apiResult # Status 값이 200이어야 정상. 500 이면 시스템 에러
urlStr <- "https://openapi.naver.com/v1/search/blog.xml" # 기본 url 생성
searchString <- "query=육아부담" # 쿼리생성
searchString <- iconv(searchString, to="UTF-8") # 인코딩
searchString <- URLencode(searchString)
searchString
etcString <- "&display=100&start=1&sort=sim"
reqUrl <- paste(urlStr, searchString, etcString, sep="")
reqUrl # 요청할 url 생성
library(httr)
clientid <- "d7xj3My8sotG_4w0nWvk" # 개인 api id 값
clientSecret <- "LnbEd9az08" # 개인 apu secret 값
apiResult <- GET(reqUrl, add_headers("X-Naver-Client-Id"=clientid,
"X-Naver-Client-Secret"=clientSecret))
apiResult # Status 값이 200이어야 정상. 500 이면 시스템 에러
str(apiResult)
apiResult$content
result <- rawToChar(apiResult$content)
result
Encoding(result) <- "UTF-8"
result
apiResult$content
result <- rawToChar(apiResult$content)
result
urlStr <- "https://openapi.naver.com/v1/search/blog.xml?" # 기본 url 생성
searchString <- "query=육아부담" # 쿼리생성
searchString <- iconv(searchString, to="UTF-8") # 인코딩
searchString <- URLencode(searchString)
searchString
etcString <- "&display=100&start=1&sort=sim"
reqUrl <- paste(urlStr, searchString, etcString, sep="")
reqUrl # 요청할 url 생성
library(httr)
clientid <- "d7xj3My8sotG_4w0nWvk" # 개인 api id 값
clientSecret <- "LnbEd9az08" # 개인 apu secret 값
apiResult <- GET(reqUrl, add_headers("X-Naver-Client-Id"=clientid,
"X-Naver-Client-Secret"=clientSecret))
apiResult # Status 값이 200이어야 정상. 500 이면 시스템 에러
length(clientid)
nchar(clientid)
clientid <- "f9XDzJ5V400w6XWodLHC" # 개인 api id 값
clientSecret <- "YNILPjHtRS" # 개인 apu secret 값
apiResult <- GET(reqUrl, add_headers("X-Naver-Client-Id"=clientid,
"X-Naver-Client-Secret"=clientSecret))
apiResult # Status 값이 200이어야 정상. 500 이면 시스템 에러
str(apiResult)
apiResult$content
result <- rawToChar(apiResult$content)
result
Encoding(result) <- "UTF-8"
result
searchString <- "query=육아" # 쿼리생성
searchString <- iconv(searchString, to="UTF-8") # 인코딩
searchString <- URLencode(searchString)
searchString
etcString <- "&display=100&start=1&sort=sim"
reqUrl <- paste(urlStr, searchString, etcString, sep="")
reqUrl # 요청할 url 생성
library(httr)
clientid <- "f9XDzJ5V400w6XWodLHC" # 개인 api id 값
clientSecret <- "YNILPjHtRS" # 개인 apu secret 값
apiResult <- GET(reqUrl, add_headers("X-Naver-Client-Id"=clientid,
"X-Naver-Client-Secret"=clientSecret))
apiResult # Status 값이 200이어야 정상. 500 이면 시스템 에러
str(apiResult)
apiResult$content
result <- rawToChar(apiResult$content)
result
Encoding(result) <- "UTF-8"
result
refineStr <- gsub("<(\\/?)(\\w+)*([^<>]*)>", " ", refineStr)
refineStr <- gsub("[[:punct:]]", " ", refineStr)
refineStr <- gsub("<(\\/?)(\\w+)*([^<>]*)>", " ", result)
refineStr <- gsub("[[:punct:]]", " ", refineStr)
refineStr <- gsub("[a-z]", " ", refineStr)
refineStr <- gsub("[0-9]", " ", refineStr)
refineStr <- gsub(" +", " ", refineStr)
refineStr
library(KoNLP)
none <-extractNoun(refineStr)
none
none2 <- sort(table(none), decreasing = T)
none2
none2 <- head(sort(table(none), decreasing = T),30)
none2
none3 <- Filter(function(x){nchar(x) >=2 }, none2)
none3
none3 <- Filter(function(x){nchar(x) >= 2 & nchar(x) <= 7},none2)
none3
none2 <- Filter(function(x){nchar(x) >= 2 & nchar(x) <= 7},none2)
none2
none2 <- Filter(function(x){nchar(x) >= 2 & nchar(x) <= 7}, none2)
none2
none3 <- Filter(function(x){nchar(x) >= 2 & nchar(x) <= 7}, none2)
none3
none2 <- head(sort(table(none), decreasing = T),30)
none3 <- Filter(function(x){nchar(x) >= 2 & nchar(x) <= 7}, none2)
none <- extractNoun(as.character(refineStr))
none2 <- head(sort(table(none), decreasing = T),30)
none3 <- Filter(function(x){nchar(x) >= 2 & nchar(x) <= 7}, none2)
none3
none <- sapply(refineStr, extractNoun, USE.NAMES = F)
none2 <- head(sort(table(none), decreasing = T),30)
none3 <- Filter(function(x){nchar(x) >= 2 & nchar(x) <= 7}, none2)
none3
none2 <- unlist(none)
none3 <- Filter(function(x){nchar(x) >= 2 & nchar(x) <= 7}, none2)
none3
noen4 <- head(sort(table(noen3), decreasing = T), 30)
noen4 <- head(sort(table(none3), decreasing = T), 30)
noen4
none5 <- gsub("육아","", none4)
none5
none5 <- gsub("육아","", none4)
none4 <- head(sort(table(none3), decreasing = T), 30)
none5 <- gsub("육아","", none4)
none5
none4
head(sort(table(none3), decreasing = T), 30)
none4 <- gsub("육아","", none3)
none4
head(sort(table(none3), decreasing = T), 30)
head(sort(table(none4), decreasing = T), 30)
noen4 <- none4[none4 != " "]
head(sort(table(none4), decreasing = T), 30)
none4 <- none4[none4 != " "]
head(sort(table(none4), decreasing = T), 30)
head(sort(table(none4), decreasing = T), 30)
none4 <- none4[none4 != ""]
head(sort(table(none4), decreasing = T), 30)
result
refineStr
reqUrl # 요청할 url 생성
result
library(stringr)
str_split(result, "<title>")
result2 <- str_split(result, "<title>")
refineStr <- gsub("<(\\/?)(\\w+)*([^<>]*)>", " ", result2)
refineStr <- gsub("[[:punct:]]", " ", refineStr)
refineStr <- gsub("[a-z]", " ", refineStr)
refineStr <- gsub("[0-9]", " ", refineStr)
refineStr <- gsub(" +", " ", refineStr)
refineStr
result2 <- str_split(result, "<title>")
refineStr <- gsub("<(\\/?)(\\w+)*([^<>]*)>", " ", result2)
refineStr
result2 <- str_split(result, "<title>")
result2
str(result2)
result2
str(result2)
result[[1]]
str(result2)
refineStr <- gsub("<(\\/?)(\\w+)*([^<>]*)>", " ", result)
refineStr <- gsub("[[:punct:]]", " ", refineStr)
refineStr <- gsub("[a-z]", " ", refineStr)
refineStr <- gsub("[0-9]", " ", refineStr)
refineStr <- gsub(" +", " ", refineStr)
refineStr
str(refineStr)
result2 <- str_split(result, "<title>")
result2[[2]]
result2[[1]]
result2 <- as.vector(str_split(result, "<title>"))
result2
str(result2)
result2 <- str_split(result, "<title>")
str_split(result, "<title>")
result <- str_split(result, "<title>")
result
setwd("D:\limworkspace\Machine-Learning\04. 비지도학습 모델 적용하기")
setwd("D:/limworkspace/Machine-Learning/04. 비지도학습 모델 적용하기")
setwd("D:/limworkspace/Machine-Learning/03. 지도학습 모델 적용하기")
setwd("D:/limworkspace/Machine-Learning/03-2 수치 예측 목적의 머신러닝 기법")
setwd("D:/limworkspace/Machine-Learning/03. 지도학습 모델 적용하기")
library(MASS)
Boston
head(Boston)
str(Boston)
Boston_train <- Boston[idx,]
Boston_test <- Boston[-idx,]
idx <- sample(1:nrow(Boston), size=nrow(Boston)*0.7, replace = F) # sample(범위, 크기, 비복원추출)
Boston_train <- Boston[idx,]
Boston_test <- Boston[-idx,]
dim(Boston_train, Boston_test)
dim(Boston_train); dim(Boston_train)
dim(Boston_train); dim(Boston_test)
str(Boston)
lm_fit <- lm(medv~., data=Boston_train)
summary(lm_fit)
lm_fit2 <- step(lm_fit, moethod='both')
summary(lm_fit2)
mse <- mean((lm_yhat2 - Boston_test$medv)^2)
mse
lm_yhat2 <- predict(lm_fit2, newdata=Boston_train)
mse <- mean((lm_yhat2 - Boston_test$medv)^2)
mse
mse <- mean((lm_yhat2 - Boston_test$medv)^2)
mse
lm_pdt <- predict(lm_fit2, newdata=Boston_train)
mse <- mean((lm_pdt - Boston_test$medv)^2)
lm_fit2 <- step(lm_fit, moethod='both')
summary(lm_fit2)
lm_pdt <- predict(lm_fit2, newdata=Boston_test) # 평가 데이터 이용, 예측 결과 생성
mse <- mean((lm_pdt - Boston_test$medv)^2)
mse
lm_pdt <- predict(lm_fit2, newdata=Boston_test, interval = 'confidence') # 평가 데이터 이용, 예측 결과 생성
mse <- mean((lm_pdt - Boston_test$medv)^2)
mse
lm_pdt
lm_pdt_95 <- predict(lm_fit2, newdata=Boston_test) # 평가 데이터 이용, 예측 결과 생성
lm_pdt <- predict(lm_fit2, newdata=Boston_test) # 평가 데이터 이용, 예측 결과 생성
lm_pdt
lm_pdt_95 <- predict(lm_fit2, newdata=Boston_test, interval = 'confidence') # 평가 데이터 이용, 예측 결과 생성
lm_pdt_95
plot(lm_fit2)
par(mfrow=c(2,2))
plot(lm_fit2)
plot(lm_fit)
plot(lm_fit2)
lm_fit2
par(mfrow=c(1,1))
plot(lm_prd, Boston_test$medv)
plot(lm_pdt, Boston_test$medv)
rmse <- sqrt(mse)
rmse
par(mfrow=c(2,2))
plot(lm_fit2)
par(mfrow=c(1,1))
library(tree)
library(tree)
tree_fit <- tree(medv~., data=Boston_train)
library(tree)
install.packages('tree')
library(tree)
tree_fit <- tree(medv~., data=Boston_train)
summary(tree_fit)
plot(tree_fit)
tree_fit
plot(tree_fit)
text(tree_fit)
text(tree_fit. pretty=0)
text(tree_fit, pretty=0)
plot(tree_fit)
text(tree_fit, pretty=0)
text(tree_fit, pretty=1)
text(tree_fit, pretty=2)
text(tree_fit)
plot(tree_fit)
text(tree_fit)
text(tree_fit, , pretty=0)
text(tree_fit,pretty=0)
GetRMSE <- function(predict, test_data){
mse <- mean((predict - test_data$medv)^2)
return(sqrt(mse))
GetRMSE <- function(predict, test_data){
mse <- mean((predict - test_data$medv)^2)
return(sqrt(mse))
}
GetRMSE <- function(predict, test_data){
mse <- mean((predict - test_data$medv)^2)
return(sqrt(mse))
}
GetRMSE <- function(predict, test_data){
mse <- mean((predict - test_data)^2)
return(sqrt(mse))
}
GetRMSE(tree_fit, Boston_test$medv)
GetRMSE <- function(predict, test_data){
mse <- mean((predict - test_data)^2)
return(sqrt(mse))
}
GetRMSE(tree_fit, Boston_test$medv)
GetRMSE <- function(pred, test_data){
mse <- mean((pred - test_data)^2)
return(sqrt(mse))
}
GetRMSE(tree_fit, Boston_test$medv)
GetRMSE(tree_pdt, Boston_test$medv)
# 모델 평가
tree_pdt <- predict(tree_fit, newdata = Boston_test)
GetRMSE(tree_pdt, Boston_test$medv)
library(rpart)
rpart_fit <- rpart(medv~.,data=Boston_train)
summary(rpart_fit)
plot(rpart_fit)
text(rpart_fit, pretty = 0)
# 모델 평가
rpart_pdt <- predict(rpart_fit, newdata = Boston_test)
GetRMSE(rpart_pdt, Boston_test$medv)
GetRMSE(tree_pdt, Boston_test$medv)
GetRMSE(rpart_pdt, Boston_test$medv)
library(rpart.plot)
install.packages('rpart.plot')
library(rpart.plot)
rpart.plot(rpart_fit, digits = 3, type=0, extra=1, fallen.leaves = F, cex=1)
rpart.plot(rpart_fit, digits = 2, type=0, extra=1, fallen.leaves = F, cex=1)
rpart.plot(rpart_fit, digits = 5, type=0, extra=1, fallen.leaves = F, cex=1)
rpart.plot(rpart_fit, digits = 3, type=0, extra=1, fallen.leaves = F, cex=1)
rpart.plot(rpart_fit, digits = 3, type = 1, extra=1, fallen.leaves = F, cex=1)
rpart.plot(rpart_fit, digits = 3, type = 2, extra=1, fallen.leaves = F, cex=1)
rpart.plot(rpart_fit, digits = 3, type = 2, extra=3, fallen.leaves = F, cex=1) # rpart.plot(데이터, 소수점 자리수, 그래프 타입,)
rpart.plot(rpart_fit, digits = 3, type = 2, extra=2, fallen.leaves = F, cex=1) # rpart.plot(데이터, 소수점 자리수, 그래프 타입,)
rpart.plot(rpart_fit, digits = 3, type = 2, extra=0, fallen.leaves = F, cex=1) # rpart.plot(데이터, 소수점 자리수, 그래프 타입,)
rpart.plot(rpart_fit, digits = 3, type = 2, extra=1, fallen.leaves = F, cex=1) # rpart.plot(데이터, 소수점 자리수, 그래프 타입,)
rpart.plot(rpart_fit, digits = 3, type = 2, extra=0, fallen.leaves = F, cex=1) # rpart.plot(데이터, 소수점 자리수, 그래프 타입,)
rpart.plot(rpart_fit, digits = 3, type = 2, extra=1, fallen.leaves = F, cex=1) # rpart.plot(데이터, 소수점 자리수, 그래프 타입,)
rpart.plot(rpart_fit, digits = 3, type = 2, extra=1, fallen.leaves = T, cex=1) # rpart.plot(데이터, 소수점 자리수, 그래프 타입, n 포함 여부)
rpart.plot(rpart_fit, digits = 3, type = 2, extra=1, fallen.leaves = T, cex=2) # rpart.plot(데이터, 소수점 자리수, 그래프 타입, n 포함 여부)
rpart.plot(rpart_fit, digits = 3, type = 2, extra=1, fallen.leaves = T, cex=1) # rpart.plot(데이터, 소수점 자리수, 그래프 타입, n 포함 여부)
rpart.plot(rpart_fit, digits = 3, type = 1, extra=1, fallen.leaves = T, cex=1) # rpart.plot(데이터, 소수점 자리수, 그래프 타입, n 포함 여부, 그래프 )
rpart.plot(rpart_fit, digits = 3, type = 2, extra=1, fallen.leaves = T, cex=1) # rpart.plot(데이터, 소수점 자리수, 그래프 타입, n 포함 여부, 그래프 )
rpart.plot(rpart_fit, digits = 3, type = 2, extra=1, fallen.leaves = F, cex=1) # rpart.plot(데이터, 소수점 자리수, 노드배치 타입, n 포함 여부, 그래프 출력 타입)
rpart.plot(rpart_fit, digits = 3, type = 2, extra=1, fallen.leaves = T, cex=1) # rpart.plot(데이터, 소수점 자리수, 노드배치 타입, n 포함 여부, 그래프 출력 타입)
library(rpart.plot)
# rpart.plot(데이터, 소수점 자리수, 노드배치 타입, n 포함 여부, 그래프 출력 타입, 글자크기)
rpart.plot(rpart_fit, digits = 3, type = 2, extra=1, fallen.leaves = T, cex=1)
rpart.plot(rpart_fit, digits = 3, type = 2, extra=1, fallen.leaves = T, cex=1)
rpart.plot(rpart_fit, digits = 3, type = 1, extra=1, fallen.leaves = T, cex=1)
GetRMSE(tree_pdt, Boston_test$medv)
GetRMSE(rpart_pdt, Boston_test$medv)
GetRMSE(lm_pdt, Boston_test$medv)
GetRMSE <- function(pred, test_data){
MSE <- mean((pred - test_data)^2) # 평균제곱오차
return(sqrt(MSE))
}
GetRMSE(lm_pdt, Boston_test$medv)
library(nnet)
library(neuralnet)
install.packages('neuralnet')
normalize <- function(x){return( (x-minx(x)) / max(x) - min(x))}
Boston_train_norm <- as.data.frame(sapply(Boston_train, normalize))
normalize <- function(x){ return( (x - min(x)) / (max(x) - min(x)) )}
Boston_train_norm <- as.data.frame(sapply(Boston_train, normalize))
Boston_test_norm <- as.data.frame(sapply(Boston_test, normalize))
head(Boston_test); head(Boston_test_norm)
head(Boston_test, 2); head(Boston_test_norm, 2)
head(Boston_test, 2)
head(Boston_test_norm, 2)
head(Boston_test_norm$medv, 2)
head(Boston_test$medv, 2)
head(Boston_test_norm$medv, 2)
# nnet 함수를 사용한 인공 신경망 모델
nnet_fit <- nnet(medv~., data=Boston_train_norm, size=5)
nnet_pdt <- predict(nnet_fit, newdata=Boston_test_norm, type='raw')
GetRMSE(nnet_pdt, Boston_test_norm$medv)
GetRMSE <- function(pred, test_data){
MSE <- mean((pred - test_data)^2) # 평균제곱오차
print('MSE' : MSE)
print('RMSE' : sqrt(MSE))
}
GetRMSE(lm_pdt, Boston_test$medv)
GetRMSE <- function(pred, test_data){
MSE <- mean((pred - test_data)^2) # 평균제곱오차
print('MSE :', MSE)
print('RMSE :', sqrt(MSE))
}
GetRMSE(lm_pdt, Boston_test$medv)
print('MSE :', MSE)
test <- 1
print('MSE :', test)
print(paste0('MSE :', test))
print(paste0('MSE : ', test))
GetRMSE <- function(pred, test_data){
MSE <- mean((pred - test_data)^2) # 평균제곱오차
print(paste0('MSE : ', MSE))
print(paste0('RMSE : ', sqrt(MSE)))
}
GetRMSE(lm_pdt, Boston_test$medv)
GetRMSE <- function(pred, test_data){
MSE <- mean((pred - test_data)^2) # 평균제곱오차
print(paste0('MSE : ', round(MSE), 2))
print(paste0('RMSE : ', round(sqrt(MSE), 2)))
}
GetRMSE(lm_pdt, Boston_test$medv)
GetRMSE <- function(pred, test_data){
MSE <- mean((pred - test_data)^2) # 평균제곱오차
print(paste0('MSE : ', round(MSE, 2)))
print(paste0('RMSE : ', round(sqrt(MSE), 2)))
}
GetRMSE(lm_pdt, Boston_test$medv)
# nnet 함수를 사용한 인공 신경망 모델
nnet_fit <- nnet(medv~., data=Boston_train_norm, size=5)
nnet_pdt <- predict(nnet_fit, newdata=Boston_test_norm, type='raw')
GetRMSE(nnet_pdt, Boston_test_norm$medv)
colnames(Boston_train)
neural_fit <- neuralnet(medv~crim+zn+indus+chas+nox+rm+age+dis+rad+tax+ptratio+black+lstat,
data=Boston_train_norm, 5)
library(neuralnet)
neural_fit <- neuralnet(medv~crim+zn+indus+chas+nox+rm+age+dis+rad+tax+ptratio+black+lstat,
data=Boston_train_norm, 5)
neural_result <- compute(neural_fit, Boston_test_norm[1:13])
neural_pdt <- neural_result$net.result
GetRMSE(neural_pdt, Boston_test_norm$medv)
GetRMSE(rpart_pdt, Boston_test$medv)
# 시각화
plot(neural_fit)
# 이 패키지의 장점은 시각화가 가능함
plot(neural_fit)
plot(nnet_fit)
neural_pdt
nnet_fit <- nnet(medv~., data=Boston_train_norm, size=5)
nnet_pdt <- predict(nnet_fit, newdata=Boston_test_norm, type='raw')
nnet_pdt <- predict(nnet_fit, newdata=Boston_test_norm)
GetRMSE(nnet_pdt, Boston_test_norm$medv)
nnet_pdt <- predict(nnet_fit, newdata=Boston_test_norm, type='raw')
GetRMSE(nnet_pdt, Boston_test_norm$medv)
sqrt(0.00834222222223)
# 이 패키지의 장점은 시각화가 가능함
plot(neural_fit)
neural_fit <- neuralnet(medv~crim+zn+indus+chas+nox+rm+age+dis+rad+tax+ptratio+black+lstat,
data=Boston_train_norm, size=5) # 독립변수를 모두 입력해야하는 번거로움
neural_fit <- neuralnet(medv~crim+zn+indus+chas+nox+rm+age+dis+rad+tax+ptratio+black+lstat,
data=Boston_train_norm, 5) # 독립변수를 모두 입력해야하는 번거로움
neural_fit <- neuralnet(medv~crim+zn+indus+chas+nox+rm+age+dis+rad+tax+ptratio+black+lstat,
data=Boston_train_norm, hidden=5) # 독립변수를 모두 입력해야하는 번거로움
library(randomForest)
set.seed(1)
rf_fit
rf_fit <- randomForest(medv~., data=Boston_train, mtry=6, importance=T) # mtry : 독립변수 개수를 제한, importance : 변수 중요도를 나타내줌
rf_fit
plot(rf_fit)
# 변수 중요도 파악
importance(rf_fit)
# 변수 중요도 시각화
varImpPlot(rf_fit)
# 모델 평가
rf_pdt <- predict(rf_fit, newdata = Boston_test)
GetRMSE(rf_pdt, Boston_test$medv)
# 스케일링한 데이터를 가지고 해보자
rf_fit2 <- randomForest(mdev~., data=Boston_train_norm, mtry=6, importance=T)
columns(Boston_train_norm)
head(Boston_train_norm)
# 스케일링한 데이터를 가지고 해보자
rf_fit2 <- randomForest(mdev~., data=Boston_train_norm, mtry=6, importance=T)
# 스케일링한 데이터를 가지고 해보자
rf_fit2 <- randomForest(medv~., data=Boston_train_norm, mtry=6, importance=T)
rf_pdf2 <- predict(rf_flt2, newdata = Boston_test_norm)
rf_pdf2 <- predict(rf_fit2, newdata = Boston_test_norm)
GetRMSE(rf_pdt2, Boston_test$medv)
GetRMSE(rf_pdt2, Boston_test_norm$medv)
rf_pdt2 <- predict(rf_fit2, newdata = Boston_test_norm)
GetRMSE(rf_pdt2, Boston_test_norm$medv)
GetRMSE(lm_pdt, Boston_test$medv)
GetRMSE(tree_pdt, Boston_test$medv)
GetRMSE(rpart_pdt, Boston_test$medv)
GetRMSE(nnet_pdt, Boston_test_norm$medv)
GetRMSE(neural_pdt, Boston_test_norm$medv)
GetRMSE(rf_pdt, Boston_test$medv)
GetRMSE(rf_pdt2, Boston_test_norm$medv)
GetRMSE(rf_pdt2, Boston_test$medv)
GetRMSE(nnet_pdt, Boston_test$medv)
GetRMSE(neural_pdt, Boston_test$medv)
GetRMSE(lm_pdt, Boston_test$medv)
GetRMSE(tree_pdt, Boston_test$medv)
GetRMSE(rpart_pdt, Boston_test$medv)
GetRMSE(nnet_pdt, Boston_test$medv)
GetRMSE(neural_pdt, Boston_test$medv)
GetRMSE(rf_pdt, Boston_test$medv)
GetRMSE(rf_pdt2, Boston_test$medv)
GetRMSE(rpart_pdt, Boston_test$medv)
GetRMSE(lm_pdt, Boston_test$medv)
GetRMSE(tree_pdt, Boston_test$medv)
GetRMSE(rpart_pdt, Boston_test$medv)
GetRMSE(nnet_pdt, Boston_test_norm$medv)
GetRMSE(rf_pdt, Boston_test$medv)
GetRMSE(rf_pdt2, Boston_test_norm$medv)
rf_pdt2
test <- as.data.frame(sapply(Boston_test_norm, 1/normalize))
test <- as.data.frame(sapply(Boston_test_norm, normalize))
test
head(Boston_test)
head(Boston_test_norm)
test <- as.data.frame(sapply(Boston_test_norm, 1/normalize))
test <- as.data.frame(sapply(Boston_test_norm, normalize))
test
head(test)
head(Boston_test_norm)
head(test)
