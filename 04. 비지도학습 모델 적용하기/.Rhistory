result <- rawToChar(apiResult$content)
result
Encoding(result) <- "UTF-8"
result
refineStr <- gsub("<(\\/?)(\\w+)*([^<>]*)>", " ", refineStr)
refineStr <- gsub("[[:punct:]]", " ", refineStr)
refineStr <- gsub("<(\\/?)(\\w+)*([^<>]*)>", " ", result)
refineStr <- gsub("[[:punct:]]", " ", refineStr)
refineStr <- gsub("[a-z]", " ", refineStr)
refineStr <- gsub("[0-9]", " ", refineStr)
refineStr <- gsub(" +", " ", refineStr)
refineStr
library(KoNLP)
none <-extractNoun(refineStr)
none
none2 <- sort(table(none), decreasing = T)
none2
none2 <- head(sort(table(none), decreasing = T),30)
none2
none3 <- Filter(function(x){nchar(x) >=2 }, none2)
none3
none3 <- Filter(function(x){nchar(x) >= 2 & nchar(x) <= 7},none2)
none3
none2 <- Filter(function(x){nchar(x) >= 2 & nchar(x) <= 7},none2)
none2
none2 <- Filter(function(x){nchar(x) >= 2 & nchar(x) <= 7}, none2)
none2
none3 <- Filter(function(x){nchar(x) >= 2 & nchar(x) <= 7}, none2)
none3
none2 <- head(sort(table(none), decreasing = T),30)
none3 <- Filter(function(x){nchar(x) >= 2 & nchar(x) <= 7}, none2)
none <- extractNoun(as.character(refineStr))
none2 <- head(sort(table(none), decreasing = T),30)
none3 <- Filter(function(x){nchar(x) >= 2 & nchar(x) <= 7}, none2)
none3
none <- sapply(refineStr, extractNoun, USE.NAMES = F)
none2 <- head(sort(table(none), decreasing = T),30)
none3 <- Filter(function(x){nchar(x) >= 2 & nchar(x) <= 7}, none2)
none3
none2 <- unlist(none)
none3 <- Filter(function(x){nchar(x) >= 2 & nchar(x) <= 7}, none2)
none3
noen4 <- head(sort(table(noen3), decreasing = T), 30)
noen4 <- head(sort(table(none3), decreasing = T), 30)
noen4
none5 <- gsub("육아","", none4)
none5
none5 <- gsub("육아","", none4)
none4 <- head(sort(table(none3), decreasing = T), 30)
none5 <- gsub("육아","", none4)
none5
none4
head(sort(table(none3), decreasing = T), 30)
none4 <- gsub("육아","", none3)
none4
head(sort(table(none3), decreasing = T), 30)
head(sort(table(none4), decreasing = T), 30)
noen4 <- none4[none4 != " "]
head(sort(table(none4), decreasing = T), 30)
none4 <- none4[none4 != " "]
head(sort(table(none4), decreasing = T), 30)
head(sort(table(none4), decreasing = T), 30)
none4 <- none4[none4 != ""]
head(sort(table(none4), decreasing = T), 30)
result
refineStr
reqUrl # 요청할 url 생성
result
library(stringr)
str_split(result, "<title>")
result2 <- str_split(result, "<title>")
refineStr <- gsub("<(\\/?)(\\w+)*([^<>]*)>", " ", result2)
refineStr <- gsub("[[:punct:]]", " ", refineStr)
refineStr <- gsub("[a-z]", " ", refineStr)
refineStr <- gsub("[0-9]", " ", refineStr)
refineStr <- gsub(" +", " ", refineStr)
refineStr
result2 <- str_split(result, "<title>")
refineStr <- gsub("<(\\/?)(\\w+)*([^<>]*)>", " ", result2)
refineStr
result2 <- str_split(result, "<title>")
result2
str(result2)
result2
str(result2)
result[[1]]
str(result2)
refineStr <- gsub("<(\\/?)(\\w+)*([^<>]*)>", " ", result)
refineStr <- gsub("[[:punct:]]", " ", refineStr)
refineStr <- gsub("[a-z]", " ", refineStr)
refineStr <- gsub("[0-9]", " ", refineStr)
refineStr <- gsub(" +", " ", refineStr)
refineStr
str(refineStr)
result2 <- str_split(result, "<title>")
result2[[2]]
result2[[1]]
result2 <- as.vector(str_split(result, "<title>"))
result2
str(result2)
result2 <- str_split(result, "<title>")
str_split(result, "<title>")
result <- str_split(result, "<title>")
result
setwd("D:/limworkspace/Machine-Learning/04. 비지도학습 모델 적용하기")
iris
iris2 <- iris[, 1:4]
iris2 <- iris[, -5] # 종속변수 제거
iris2
for (k in 2:7) {
set.seed(1)
km_out <- kmeans(iris2, centers = k)
km_out_withness[i-1] <- km_out$tot.withinss
km_out_between[i-1] <- km_out$betweenss
print(paste0('k = ', k,'SSW = ',km_out_withness, 'SSB = ',km_out_between  ))
}
km_out_withness <- c() # 집단 내 제곱합(SSW) 리스트 생성
km_out_between <- c()  # 집단 간 제곱합(SSB) 리스트 생성
for (k in 2:7) {
set.seed(1)
km_out <- kmeans(iris2, centers = k)
km_out_withness[i-1] <- km_out$tot.withinss
km_out_between[i-1] <- km_out$betweenss
print(paste0('k = ', k,'SSW = ',km_out_withness, 'SSB = ',km_out_between  ))
}
for (k in 2:7) {
set.seed(1)
km_out <- kmeans(iris2, centers = k)
km_out_withness[k-1] <- km_out$tot.withinss
km_out_between[k-1] <- km_out$betweenss
print(paste0('k = ', k,'SSW = ',km_out_withness, 'SSB = ',km_out_between  ))
}
print(paste0('k = ', k,' SSW = ',km_out_withness, 'SSB = ',km_out_between  ))
for (k in 2:7) {
set.seed(1)
km_out <- kmeans(iris2, centers = k)
km_out_withness[k-1] <- km_out$tot.withinss
km_out_between[k-1] <- km_out$betweenss
print(paste0('k = ', k,' SSW = ',km_out_withness, 'SSB = ',km_out_between  ))
}
km_out_withness <- c() # 집단 내 제곱합(SSW) 리스트 생성
km_out_between <- c()  # 집단 간 제곱합(SSB) 리스트 생성
for (k in 2:7) {
set.seed(1)
km_out <- kmeans(iris2, centers = k)
km_out_withness[k-1] <- km_out$tot.withinss
km_out_between[k-1] <- km_out$betweenss
print(paste0('k = ', k,' SSW = ',km_out_withness, ' SSB = ',km_out_between  ))
}
km_out_withness <- c() # 집단 내 제곱합(SSW) 리스트 생성
km_out_between <- c()  # 집단 간 제곱합(SSB) 리스트 생성
for (k in 1:7) {
set.seed(1)
km_out <- kmeans(iris2, centers = k)
km_out_withness[k-1] <- km_out$tot.withinss
km_out_between[k-1] <- km_out$betweenss
print(paste0('k = ', k,' SSW = ',km_out_withness, ' SSB = ',km_out_between  ))
}
km_out_withness <- c() # 집단 내 제곱합(SSW) 리스트 생성
km_out_between <- c()  # 집단 간 제곱합(SSB) 리스트 생성
for (k in 2:7) {
set.seed(1)
km_out <- kmeans(iris2, centers = k)
km_out_withness[k-1] <- km_out$tot.withinss
km_out_between[k-1] <- km_out$betweenss
print(paste0('k = ', k,' SSW = ',km_out_withness, ' SSB = ',km_out_between  ))
}
km_out_withness <- c() # 집단 내 제곱합(SSW) 리스트 생성
km_out_between <- c()  # 집단 간 제곱합(SSB) 리스트 생성
for (k in 2:7) {
set.seed(1)
km_out <- kmeans(iris2, centers = k)
km_out_withness[k-1] <- km_out$tot.withinss
km_out_between[k-1] <- km_out$betweenss
print(paste0('k = ', k,' SSW = ',km_out_withness[k-1], ' SSB = ',km_out_between[k-1]))
}
km_out_withness <- c() # 집단 내 제곱합(SSW) 리스트 생성
km_out_between <- c()  # 집단 간 제곱합(SSB) 리스트 생성
for (k in 2:7) {
set.seed(1)
km_out <- kmeans(iris2, centers = k)
print(paste0('k = ', k,' SSW = ',km_out$tot.withinss, ' SSB = ',km_out$betweenss))
for (k in 2:7) {
set.seed(1)
km_out <- kmeans(iris2, centers = k)
print(paste0('k = ', k,' SSW = ',km_out$tot.withinss, ' SSB = ',km_out$betweenss))
}
km_out_withness <- c() # 집단 내 제곱합(SSW) 리스트 생성
km_out_between <- c()  # 집단 간 제곱합(SSB) 리스트 생성
for (k in 2:7) {
set.seed(1)
km_out <- kmeans(iris2, centers = k)
print(paste0('k = ', k,' SSW = ',km_out$tot.withinss, ' SSB = ',km_out$betweenss))
}
for (k in 2:7) {
set.seed(1)
km_out <- kmeans(iris2, centers = k)
SSW <- km_out$tot.withinss
SSB <- km_out$betweenss
print(paste0('k = ', k,' SSW = ',SSW, ' SSB = ',SSB))
}
km_out_withness <- c() # 집단 내 제곱합(SSW) 리스트 생성
km_out_between <- c()  # 집단 간 제곱합(SSB) 리스트 생성
for (k in 2:10) {
set.seed(1)
km_out <- kmeans(iris2, centers = k)
SSW <- km_out$tot.withinss
SSB <- km_out$betweenss
print(paste0('k = ', k,' SSW = ',SSW, ' SSB = ',SSB))
}
iris2 <- iris[, -5] # 종속변수 제거
km_out_withness <- c() # 집단 내 제곱합(SSW) 리스트 생성
km_out_between <- c()  # 집단 간 제곱합(SSB) 리스트 생성
iris2 <- iris[, -5] # 종속변수 제거
for (k in 2:10) {
set.seed(1)
km_out <- kmeans(iris2, centers = k)
SSW <- km_out$tot.withinss # 집단 내 제곱합(SSW)
SSB <- km_out$betweenss # 집단 간 제곱합(SSB)
print(paste0('k = ', k,' SSW = ',SSW, ' SSB = ',SSB))
}
for (k in 2:20) {
set.seed(1)
km_out <- kmeans(iris2, centers = k)
SSW <- km_out$tot.withinss # 집단 내 제곱합(SSW)
SSB <- km_out$betweenss # 집단 간 제곱합(SSB)
print(paste0('k = ', k,' SSW = ',SSW, ' SSB = ',SSB))
}
iris2 <- iris[, -5] # 종속변수 제거
km_out_withness <- c() # 집단 내 제곱합(SSW) 리스트 생성
km_out_between <- c()  # 집단 간 제곱합(SSB) 리스트 생성
for (k in 2:7) {
set.seed(1)
km_out <- kmeans(iris2, centers = k)
km_out_withness[k-1] <- km_out$tot.withinss
km_out_between[k-1] <- km_out$betweenss
print(paste0('k = ', k,' SSW = ',km_out_withness[k-1], ' SSB = ',km_out_between[k-1]))
}
library(ggplot2)
km_df <- data.frame(km_out_withness, km_out_between)
km_df
k <- c()
for (k in 2:7) {
set.seed(1)
km_out <- kmeans(iris2, centers = k)
k[k-1] <- k
km_out_withness[k-1] <- km_out$tot.withinss
km_out_between[k-1] <- km_out$betweenss
print(paste0('k = ', k,' SSW = ',km_out_withness[k-1], ' SSB = ',km_out_between[k-1]))
}
km_df <- data.frame(k, km_out_withness, km_out_between)
km_df
k <- c()
for (k in 2:7) {
set.seed(1)
km_out <- kmeans(iris2, centers = k)
k[k-1] <- k
km_out_withness[k-1] <- km_out$tot.withinss
km_out_between[k-1] <- km_out$betweenss
print(paste0('k = ', k,' SSW = ',km_out_withness[k-1], ' SSB = ',km_out_between[k-1]))
}
km_df <- data.frame(k, km_out_withness, km_out_between)
for (k in 2:7) {
set.seed(1)
km_out <- kmeans(iris2, centers = k)
k[k-1] <- k
km_out_withness[k-1] <- km_out$tot.withinss
km_out_between[k-1] <- km_out$betweenss
}
km_df <- data.frame(k, km_out_withness, km_out_between)
km_df
i <- c()
for (k in 2:7) {
set.seed(1)
km_out <- kmeans(iris2, centers = k)
i[k-1] <- k
km_out_withness[k-1] <- km_out$tot.withinss
km_out_between[k-1] <- km_out$betweenss
}
km_df <- data.frame(k, km_out_withness, km_out_between)
km_df
k <- c()
for (k in 2:7) {
set.seed(1)
km_out <- kmeans(iris2, centers = k)
k[k-1] <- k
km_out_withness[k-1] <- km_out$tot.withinss
km_out_between[k-1] <- km_out$betweenss
}
k
for (k in 2:7) {
set.seed(1)
km_out <- kmeans(iris2, centers = k)
k <- c()
k[k-1] <- k
km_out_withness[k-1] <- km_out$tot.withinss
km_out_between[k-1] <- km_out$betweenss
}
km_df <- data.frame(k, km_out_withness, km_out_between)
km_df
for (k in 2:7) {
set.seed(1)
km_out <- kmeans(iris2, centers = k)
km_out_withness[k-1] <- km_out$tot.withinss
km_out_between[k-1] <- km_out$betweenss
}
km_df <- data.frame(k=c(2:7), km_out_withness, km_out_between)
km_df
ggplot(data=km_df, aes(x=k, y=km_out_withness)) +
geom_line()
plot(x=k, y=km_out_withness, data=km_df)
plot(x=km_df$k, y=km_df$km_out_withness)
plot(x=km_df$k, y=km_df$km_out_withness, lty='l')
plot(x=km_df$k, y=km_df$km_out_withness, type='l')
plot(x=km_df$k, y=km_df$km_out_withness, type='o')
plot(x=km_df$k, y=km_df$km_out_between, type='o')
par(mfrow(2,2))
plot(x=km_df$k, y=km_df$km_out_withness, type='o')
plot(x=km_df$k, y=km_df$km_out_between, type='o')
par(mfrow(1,2))
par(mfrow=c(1,2))
plot(x=km_df$k, y=km_df$km_out_withness, type='o')
plot(x=km_df$k, y=km_df$km_out_between, type='o')
plot(x=km_df$k, y=km_df$km_out_withness, type='o', col='red')
plot(x=km_df$k, y=km_df$km_out_between, type='o', col='green')
plot(x=km_df$k, y=km_df$km_out_between, type='o', col='deepblue')
plot(x=km_df$k, y=km_df$km_out_withness, type='o', col='red')
plot(x=km_df$k, y=km_df$km_out_between, type='o', col='deepblue')
plot(x=km_df$k, y=km_df$km_out_withness, type='o', col='red')
plot(x=km_df$k, y=km_df$km_out_between, type='o', col='deepskyblue')
par(mfrow=c(1,2))
plot(x=km_df$k, y=km_df$km_out_withness, type='o', col='red')
plot(x=km_df$k, y=km_df$km_out_between, type='o', col='deepskyblue')
km_out_k3 <- kmeans(iris2, centers = 3)
km_out_k3$centers # 각 군집의 중심점 출력
km_out_k3$cluster # 각 관측치의 할당된 군집번호 출력
km_out_k3$size # 각 군집의 데이터 관측치 개수 출력
table(km_out_k3$cluster, iris$Species)
iris2[,1:2]
km_out_k3$centers # 각 군집의 중심점 출력
km_out_k3$cluster # 각 관측치의 할당된 군집번호 출력
km_out_k3$size # 각 군집의 데이터 관측치 개수 출력
plot(iris2[,1:2], col=km_out_k3$cluster, pch=ifelse(km_out_k3$cluster==1, 16,
ifelse(km_out_k3$cluster==2, 17, 18)), cex=2)
par(mfrow=c(1,1))
plot(iris2[,1:2], col=km_out_k3$cluster, pch=ifelse(km_out_k3$cluster==1, 16,
ifelse(km_out_k3$cluster==2, 17, 18)), cex=2)
points(km_out$centers, col=1:3, pch=16:18, cex=5)
par(mfrow=c(1,1))
plot(iris2[,1:2], col=km_out_k3$cluster, pch=ifelse(km_out_k3$cluster==1, 16,
ifelse(km_out_k3$cluster==2, 17, 18)), cex=2)
points(km_out_k3$centers, col=1:3, pch=16:18, cex=5)
crime
crimtab
crime = read.csv("http://datasets.flowingdata.com/crimeRatesByState-formatted.csv")
head(crime)
crime[,1] <- rownames(crime)
head(crime)
stars(crime[, 2:8], flip.labels = FALSE, key.loc = c(1,20))
crime = read.csv("http://datasets.flowingdata.com/crimeRatesByState-formatted.csv")
head(crime)
rownames(crime) <- crime[,1]
crime
stars(crime[, 2:8], flip.labels = FALSE, key.loc = c(1,20))
stars(crime[, 2:8], flip.labels = FALSE, key.loc = c(1,20), draw.segments = T)
data <- read.csv('data/20140528_baseball.csv')
model = prcomp(data[, 2:6], scale = T)
model <- prcomp(data[, 2:6], scale = T)
summary(model)
plot(model)
biplot(model)
rownames(data)=data[,1]
data
model=prcomp(data[,2:6],scale=T)
biplot(model)
model <- prcomp(data[, 2:6], scale = T) # 주성분 분석
summary(model)
plot(model)
biplot(model)
rownames(data) <- data[,1]
data
model <- prcomp(data[, 2:6], scale = T) # 주성분 분석
summary(model)
plot(model)
biplot(model)
rownames(data) <- data[,1]
data
model <- prcomp(data[, 2:6],scale=T)
biplot(model)
data <- read.csv('data/20140528_baseball.csv')
model <- prcomp(data[, 2:6], scale = T) # 주성분 분석
summary(model)
plot(model)
biplot(model)
rownames(data) <- data[,1]
data
model <- prcomp(data[, 2:6],scale=T)
biplot(model)
model <- prcomp(data[, 2:6], scale = T) # 주성분 분석
rownames(data) <- data[,1]
data <- read.csv('data/20140528_baseball.csv')
rownames(data) <- data[,1]
data
model <- prcomp(data[, 2:6],scale=T)
summary(model)
plot(model)
biplot(model)
head(USArrests)
pc1 = princomp(USArrests, cor=T)
summary(pc1)
plot(pc1, type='o')
plot(pc1, type='l')
pc1$center
pc1$center
pc1$scale
pc1$loadings
pc1$scores
summary(pc1) # 주성분 분석 결과 요약
plot(pc1, type='l') # Scree plot
pc1$center
pc1$loadings # 원 변수들이 각 주성분 변수에 기여하는 가중치 확인
pc1$scoresp[,1]
plot(pc1$scoresp[,1], pc1$scores[,2], xlab='Z1', ylab='Z2')
pc1$scores
plot(pc1$scores[,1], pc1$scores[,2], xlab='Z1', ylab='Z2')
biplot(pc1, cex=0.7)
abline(v=0, h=0, col=gray)
abline(v=0, h=0, col="gray")
biplot(pc1, cex=0.7)
abline(v=0, h=0, col="gray")
biplot(pc1, cex=0.7)
abline(v=0, h=0, col="gray")
# princomp 함수
head(USArrests)
pc1$loadings # 원 변수들이 각 주성분 변수에 기여하는 가중치 확인
library('arules')
library('arulesViz')
data(Groceries)
Groceries)
Groceries
data(packages='arules')
data(packages='arules')
library('arules')
library('arulesViz')
data(packages='arules')
data(package='arules')
inspect(Groceries[1:10])
type(Groceries)
class(Groceries)
inspect(Groceries[1:10])
inspect(Groceries[1:10])
summary(Groceries)
itemFrequency(Groceries)
itemFrequencyPlot(itemFrequency(Groceries)
)
itemFrequencyPlot(itemFrequency(Groceries)
itemFrequencyPlot(itemFrequency(Groceries))
sort(itemFrequency(Groceries, type='absolute'), decreasing = T)
itemFrequencyPlot(itemFrequency(Groceries))
class(Groceries)          # 희박행렬 형태(Sparse Format)
inspect(Groceries[1:10])  # 희박행렬 데이터 확인
summary(Groceries) # 트렌잭션 데이터 요약
sort(itemFrequency(Groceries, type='absolute'), decreasing = T) # type = 'absolute' 절대도수
itemFrequencyPlot(itemFrequency(Groceries))
head(sort(itemFrequency(Groceries, type='absolute'), decreasing = T)) # type = 'absolute' 절대도수
itemFrequencyPlot(Groceries, topN=10, type='absolute')
itemFrequencyPlot(Groceries, topN=10, type='absolute', color='coral')
itemFrequencyPlot(Groceries, topN=10, type='absolute', col='coral')
itemFrequencyPlot(Groceries, topN=10, type='absolute', col='Set3')
itemFrequencyPlot(Groceries, topN=10, type='absolute', palette='Set3')
itemFrequencyPlot(Groceries, topN=10, type='absolute', col=rainbow(10))
itemFrequencyPlot(Groceries, topN=10, type='absolute', col=rainbow(10), alpha=0.1)
itemFrequencyPlot(Groceries, topN=10, type='absolute', col=rainbow(10), alpha(0.1))
itemFrequencyPlot(Groceries, topN=10, type='absolute', col=rainbow(10), alpha=0.1)
itemFrequencyPlot(Groceries, topN=10, type='absolute', col=rainbow(10))
apriori(Groceries)
result <- apriori(Groceries, parameter = list(support=0.005, confidence=0.5, minlen=2))
result
summary(result)
inspect(result[1:5])
# 향샹도를 기준으로 정렬
result_lift <- apriori(result, by='lift', decreasing=T)
# 향샹도를 기준으로 정렬
result_lift <- sort(result, by='lift', decreasing=T)
inspect(result_lift[1:5])
milk_rule <- subset(result, items %in% "whole milk")
v
milk_rule
inspect(milk_rule[1:5])
inspect(sort(milk_rule, by="lift", decreasing = T))
inspect(sort(milk_rule, by="lift", decreasing = T)[1:5])
milk_rule_lhs <- subset(result, items %in% "whole milk")
milk_rule_lhs
inspect(sort(milk_rule_lhs, by="lift", decreasing = T)[1:5])
milk_rule_rhs <- subset(result, rhs %in% "whole milk")
milk_rule_rhs
inspect(sort(milk_rule_rhs, by="lift", decreasing = T)[1:5])
milk_rule_both <- subset(result, items %in% "whole milk")
milk_rule_boht
inspect(sort(milk_rule_both, by="lift", decreasing = T)[1:5])
milk_rule_rhs <- subset(result, rhs %in% "whole milk")
milk_rule_rhs
inspect(sort(milk_rule_rhs, by="lift", decreasing = T)[1:5])
milk_rule_both <- subset(result, items %in% "whole milk")
milk_rule_both
inspect(sort(milk_rule_both, by="lift", decreasing = T)[1:5])
inspect(sort(milk_rule_both, by="lift", decreasing = T)[1:20])
inspect(sort(milk_rule_both, by="lift", decreasing = T)[10:15])
milk_rule_rhs <- subset(result, rhs %in% "whole milk")
milk_rule_rhs
inspect(sort(milk_rule_rhs, by="lift", decreasing = T)[1:5])
plot(milk_rule_both[1:10], method = 'graph', measure = 'lift', shading = 'confidence')
