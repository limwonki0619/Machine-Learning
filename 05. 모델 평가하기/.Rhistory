install.packages("ggplot2")
install.packages("dplyr")
install.packages("reshape")
install.packages("stringr")
install.packages("car")
library(rJava) # rJava와 KoNLP는 다른 패키지보다 우선적으로 설치해주는 게 좋음
library(KoNLP)
library(lubridate)
library(stringr)
library(reshape2)
library(rvest)
library(dplyr)
library(xlsx)
library(ggplot2)
library(extrafont)
windowsFonts(dohyeon=windowsFont("BM DoHyeon"))
windowsFonts(jalnan=windowsFont("Jalnan"))
data.frame(v1 <- c(110123, 110124, 110125, 110126, NA))
data.frame(v1 = c(110123, 110124, 110125, 110126, NA))
data.frame(v1 = c(110123, 110124, 110125, 110126, NA),
v2 = c(1, 2, 3, 4, 5))
df <- data.frame(v1 = c(110123, 110124, 110125, 110126, NA),
v2 = c(1, 2, 3, 4, 5))
tmep <- data.frame(주소코드 = c(110123, 110124, 110125, 110126, NA), 주소 = c("서울", "대전", "대구", "부산", NA))
tmep
df <- data.frame(v1 = c(110123, 110124, 110125, 110126, NA, 110123, 110125),
v2 = c(1, 2, 3, 4, 5,6,7))
tmep <- data.frame(주소코드 = c(110123, 110124, 110125, 110126, NA), 주소 = c("서울", "대전", "대구", "부산", NA))
df
tmep
merge(df, temp)
tmep <- data.frame(주소코드 = c(110123, 110124, 110125, 110126, NA), 주소 = c("서울", "대전", "대구", "부산", NA))
temp <- data.frame(주소코드 = c(110123, 110124, 110125, 110126, NA), 주소 = c("서울", "대전", "대구", "부산", NA))
merge(df, temp)
?merge
merge(df, temp, by=df$v1)
merge(df, temp, by.x="v1")
merge(df, temp, by.x=v1)
merge(df, temp, by.x=df$v1)
df <- data.frame(v1 = c(110123, 110124, 110125, 110126, NA, 110123, 110125),
v2 = c(1, 2, 3, 4, 5,6,7))
temp <- data.frame(주소코드 = c(110123, 110124, 110125, 110126, NA), 주소 = c("서울", "대전", "대구", "부산", NA))
df; temp
temp <- data.frame(주소코드 = c(110123, 110124, 110125, 110126, NA), 주소 = c("서울", "대전", "대구", "부산", "NA"))
df; temp
if(df[,1] == temp[,1]) {df[,3] <- temp[,2]}
df[,1]
df[1,]$v1
df[1,]$v1 == temp[1,]$주소코드
if(df[1,]$v1 == temp[1,]$주소코드){
df[3,]$v1 <- temp[1,]$주소
}
df
df <- data.frame(v1 = c(110123, 110124, 110125, 110126, NA, 110123, 110125),
v2 = c(1, 2, 3, 4, 5,6,7))
df
df[1,]$v3 <- temp[1,]$주소
}
df[1,]$v3
temp[1,]$주소
temp
df$v3 <- NULL
if(df[1,]$v1 == temp[1,]$주소코드){
df[1,]$v3 <- temp[1,]$주소
}
if(df[1,]$v1 == temp[1,]$주소코드){
df[1,]$v3 <- temp[1,]$주소
}
df[1,]$v3
df
df$v3 <- c()
df
local({
# The directory where Pandoc will be extracted. Feel free
# to adjust this path as appropriate.
dir <- "~/rstudio-pandoc"
# The version of Pandoc to be installed.
version <- "2.7.1"
# Create and move to the requested directory.
dir.create(dir, showWarnings = FALSE, recursive = TRUE)
owd <- setwd(dir)
on.exit(setwd(owd), add = TRUE)
# Construct path to pandoc.
root <- "https://s3.amazonaws.com/rstudio-buildtools"
suffix <- sprintf("pandoc-%s-windows-x86_64.zip", version)
url <- file.path(root, "pandoc-rstudio", version, suffix)
# Download and extract pandoc.
file <- basename(url)
utils::download.file(url, destfile = file)
utils::unzip(file)
unlink(file)
# Write .Renviron to update the version of Pandoc used.
entry <- paste("RSTUDIO_PANDOC", shQuote(path.expand(dir)), sep = " = ")
contents <- if (file.exists("~/.Renviron")) readLines("~/.Renviron")
filtered <- grep("^RSTUDIO_PANDOC", contents, value = TRUE, invert = TRUE)
amended <- union(filtered, entry)
writeLines(amended, "~/.Renviron")
# Report change to the user.
writeLines("Updated .Renviron:\n")
writeLines(amended)
writeLines("\nPlease restart RStudio for these changes to take effect.")
})
urlstr <- "https://openapi.naver.com/v1/search/blog.xml?"
searchString <- "query=육아 부담"
urlStr <- "https://openapi.naver.com/v1/search/blog.xml?"
searchString <- "query=육아 부담"
searchString <- iconv(searchString, to="UTF-8")
searchString <- URLencode(searchString)
searchString
etcString <- "&display=1000%start=1&sort=sim"
reqUrl <- paste(urlStr, searchString, etcString, sep="")
reqUrl
install.packages("httr")
library(httr)
clientid <- "lu8wGw610yc3_BMstlCx"
clientSecret <- "7geOU5dRoC"
apiResult <- GET(reqUrl, add_headers("X-Naver-Client-Id"=clientid,
"X-Naver-Client-Secret"=clientSecret))
apiResult
str(apiResult)
apiResult$content
result <- rawToChar(apiResult$content)
result
Encoding(result) <- "UTF-8"
result
apiResult$content
searchString <- "query=육아부담"
searchString <- iconv(searchString, to="UTF-8")
searchString <- URLencode(searchString)
searchString
etcString <- "&display=1000%start=1&sort=sim"
reqUrl <- paste(urlStr, searchString, etcString, sep="")
reqUrl
library(httr)
clientid <- "lu8wGw610yc3_BMstlCx"
clientSecret <- "7geOU5dRoC"
apiResult <- GET(reqUrl, add_headers("X-Naver-Client-Id"=clientid,
"X-Naver-Client-Secret"=clientSecret))
apiResult
str(apiResult)
result <- rawToChar(apiResult$content)
result
Encoding(result) <- "UTF-8"
result
reqUrl
etcString <- "&display=100%start=1&sort=sim"
reqUrl <- paste(urlStr, searchString, etcString, sep="")
reqUrl
library(httr)
clientid <- "lu8wGw610yc3_BMstlCx"
clientSecret <- "7geOU5dRoC"
apiResult <- GET(reqUrl, add_headers("X-Naver-Client-Id"=clientid,
"X-Naver-Client-Secret"=clientSecret))
apiResult
str(apiResult)
apiResult$content
clientSecret <- "bBJso4WGrc"
apiResult <- GET(reqUrl, add_headers("X-Naver-Client-Id"=clientid,
"X-Naver-Client-Secret"=clientSecret))
apiResult
str(apiResult)
apiResult
result
apiResult$content
apiResult
apiResult #
etcString <- "&display=100&start=1&sort=sim"
reqUrl <- paste(urlStr, searchString, etcString, sep="")
reqUrl # 요청할 url 생성
library(httr)
clientid <- "d7xj3My8sotG_4w0nWvk" # 개인 api id 값
clientSecret <- "LnbEd9az08" # 개인 apu secret 값
apiResult <- GET(reqUrl, add_headers("X-Naver-Client-Id"=clientid,
"X-Naver-Client-Secret"=clientSecret))
apiResult # Status 값이 200이어야 정상. 500 이면 시스템 에러
urlStr <- "https://openapi.naver.com/v1/search/blog.xml" # 기본 url 생성
searchString <- "query=육아부담" # 쿼리생성
searchString <- iconv(searchString, to="UTF-8") # 인코딩
searchString <- URLencode(searchString)
searchString
etcString <- "&display=100&start=1&sort=sim"
reqUrl <- paste(urlStr, searchString, etcString, sep="")
reqUrl # 요청할 url 생성
library(httr)
clientid <- "d7xj3My8sotG_4w0nWvk" # 개인 api id 값
clientSecret <- "LnbEd9az08" # 개인 apu secret 값
apiResult <- GET(reqUrl, add_headers("X-Naver-Client-Id"=clientid,
"X-Naver-Client-Secret"=clientSecret))
apiResult # Status 값이 200이어야 정상. 500 이면 시스템 에러
str(apiResult)
apiResult$content
result <- rawToChar(apiResult$content)
result
Encoding(result) <- "UTF-8"
result
apiResult$content
result <- rawToChar(apiResult$content)
result
urlStr <- "https://openapi.naver.com/v1/search/blog.xml?" # 기본 url 생성
searchString <- "query=육아부담" # 쿼리생성
searchString <- iconv(searchString, to="UTF-8") # 인코딩
searchString <- URLencode(searchString)
searchString
etcString <- "&display=100&start=1&sort=sim"
reqUrl <- paste(urlStr, searchString, etcString, sep="")
reqUrl # 요청할 url 생성
library(httr)
clientid <- "d7xj3My8sotG_4w0nWvk" # 개인 api id 값
clientSecret <- "LnbEd9az08" # 개인 apu secret 값
apiResult <- GET(reqUrl, add_headers("X-Naver-Client-Id"=clientid,
"X-Naver-Client-Secret"=clientSecret))
apiResult # Status 값이 200이어야 정상. 500 이면 시스템 에러
length(clientid)
nchar(clientid)
clientid <- "f9XDzJ5V400w6XWodLHC" # 개인 api id 값
clientSecret <- "YNILPjHtRS" # 개인 apu secret 값
apiResult <- GET(reqUrl, add_headers("X-Naver-Client-Id"=clientid,
"X-Naver-Client-Secret"=clientSecret))
apiResult # Status 값이 200이어야 정상. 500 이면 시스템 에러
str(apiResult)
apiResult$content
result <- rawToChar(apiResult$content)
result
Encoding(result) <- "UTF-8"
result
searchString <- "query=육아" # 쿼리생성
searchString <- iconv(searchString, to="UTF-8") # 인코딩
searchString <- URLencode(searchString)
searchString
etcString <- "&display=100&start=1&sort=sim"
reqUrl <- paste(urlStr, searchString, etcString, sep="")
reqUrl # 요청할 url 생성
library(httr)
clientid <- "f9XDzJ5V400w6XWodLHC" # 개인 api id 값
clientSecret <- "YNILPjHtRS" # 개인 apu secret 값
apiResult <- GET(reqUrl, add_headers("X-Naver-Client-Id"=clientid,
"X-Naver-Client-Secret"=clientSecret))
apiResult # Status 값이 200이어야 정상. 500 이면 시스템 에러
str(apiResult)
apiResult$content
result <- rawToChar(apiResult$content)
result
Encoding(result) <- "UTF-8"
result
refineStr <- gsub("<(\\/?)(\\w+)*([^<>]*)>", " ", refineStr)
refineStr <- gsub("[[:punct:]]", " ", refineStr)
refineStr <- gsub("<(\\/?)(\\w+)*([^<>]*)>", " ", result)
refineStr <- gsub("[[:punct:]]", " ", refineStr)
refineStr <- gsub("[a-z]", " ", refineStr)
refineStr <- gsub("[0-9]", " ", refineStr)
refineStr <- gsub(" +", " ", refineStr)
refineStr
library(KoNLP)
none <-extractNoun(refineStr)
none
none2 <- sort(table(none), decreasing = T)
none2
none2 <- head(sort(table(none), decreasing = T),30)
none2
none3 <- Filter(function(x){nchar(x) >=2 }, none2)
none3
none3 <- Filter(function(x){nchar(x) >= 2 & nchar(x) <= 7},none2)
none3
none2 <- Filter(function(x){nchar(x) >= 2 & nchar(x) <= 7},none2)
none2
none2 <- Filter(function(x){nchar(x) >= 2 & nchar(x) <= 7}, none2)
none2
none3 <- Filter(function(x){nchar(x) >= 2 & nchar(x) <= 7}, none2)
none3
none2 <- head(sort(table(none), decreasing = T),30)
none3 <- Filter(function(x){nchar(x) >= 2 & nchar(x) <= 7}, none2)
none <- extractNoun(as.character(refineStr))
none2 <- head(sort(table(none), decreasing = T),30)
none3 <- Filter(function(x){nchar(x) >= 2 & nchar(x) <= 7}, none2)
none3
none <- sapply(refineStr, extractNoun, USE.NAMES = F)
none2 <- head(sort(table(none), decreasing = T),30)
none3 <- Filter(function(x){nchar(x) >= 2 & nchar(x) <= 7}, none2)
none3
none2 <- unlist(none)
none3 <- Filter(function(x){nchar(x) >= 2 & nchar(x) <= 7}, none2)
none3
noen4 <- head(sort(table(noen3), decreasing = T), 30)
noen4 <- head(sort(table(none3), decreasing = T), 30)
noen4
none5 <- gsub("육아","", none4)
none5
none5 <- gsub("육아","", none4)
none4 <- head(sort(table(none3), decreasing = T), 30)
none5 <- gsub("육아","", none4)
none5
none4
head(sort(table(none3), decreasing = T), 30)
none4 <- gsub("육아","", none3)
none4
head(sort(table(none3), decreasing = T), 30)
head(sort(table(none4), decreasing = T), 30)
noen4 <- none4[none4 != " "]
head(sort(table(none4), decreasing = T), 30)
none4 <- none4[none4 != " "]
head(sort(table(none4), decreasing = T), 30)
head(sort(table(none4), decreasing = T), 30)
none4 <- none4[none4 != ""]
head(sort(table(none4), decreasing = T), 30)
result
refineStr
reqUrl # 요청할 url 생성
result
library(stringr)
str_split(result, "<title>")
result2 <- str_split(result, "<title>")
refineStr <- gsub("<(\\/?)(\\w+)*([^<>]*)>", " ", result2)
refineStr <- gsub("[[:punct:]]", " ", refineStr)
refineStr <- gsub("[a-z]", " ", refineStr)
refineStr <- gsub("[0-9]", " ", refineStr)
refineStr <- gsub(" +", " ", refineStr)
refineStr
result2 <- str_split(result, "<title>")
refineStr <- gsub("<(\\/?)(\\w+)*([^<>]*)>", " ", result2)
refineStr
result2 <- str_split(result, "<title>")
result2
str(result2)
result2
str(result2)
result[[1]]
str(result2)
refineStr <- gsub("<(\\/?)(\\w+)*([^<>]*)>", " ", result)
refineStr <- gsub("[[:punct:]]", " ", refineStr)
refineStr <- gsub("[a-z]", " ", refineStr)
refineStr <- gsub("[0-9]", " ", refineStr)
refineStr <- gsub(" +", " ", refineStr)
refineStr
str(refineStr)
result2 <- str_split(result, "<title>")
result2[[2]]
result2[[1]]
result2 <- as.vector(str_split(result, "<title>"))
result2
str(result2)
result2 <- str_split(result, "<title>")
str_split(result, "<title>")
result <- str_split(result, "<title>")
result
setwd("D:/limworkspace/Machine-Learning/05. 모델 평가하기")
setwd("D:/limworkspace/Machine-Learning/05. 모델 평가하기")
data <- read.csv('data/disease.csv')
head(data)
model <- glm(disease~., data=data, family = binomial(Logic)) # 로지스틱 회귀분석
model <- glm(disease~., data=data, family = binomial(logic)) # 로지스틱 회귀분석
model <- glm(disease~., data=data, family = binomial(logit)) # 로지스틱 회귀분석
summary(model)
summary(model)
model2 <- glm(disease~ age+sector, data=data, family = binomial(logit))
summary(model2)
anova(model, model2, test="chisq")
anova(model, model2, test="Chisq")
summary(model2)
summary(model)
summary(model2)
table(data$disease)
31/98
table(data$disease, model2$fitted.values > 0.31)
table(data$disease, model2$fitted.values > 0.31) # 실제값, 예측값 > (31/98)
# 혼동 행렬
CM <- table(data$disease, model2$fitted.values > 0.31) # 실제값, 예측값 > (31/98)
c(민감도 = CM[2])
c(민감도 = CM[2,2]/sum(CM[2,]))
c(민감도 = CM[2,2]/sum(CM[2,]),
특이도 = CM[1,1]/sum(CM[1,]),
에러율 = CM[1,2]+CM[2,1]/sum(CM))
c(민감도 = CM[2,2]/sum(CM[2,]),
특이도 = CM[1,1]/sum(CM[1,]),
에러율 = (CM[1,2]+CM[2,1])/sum(CM))
CM
c(정확도 = (CM[1,1] + CM[2,2]) /sum(CM),
민감도 = CM[2,2]/sum(CM[2,]),
특이도 = CM[1,1]/sum(CM[1,]),
에러율 = (CM[1,2]+CM[2,1])/sum(CM))
CM
install.packages('Deducer')
library(Deducer)
rocplot(model2)
rocplot(model)
rocplot(model2)
#
install.packages('caret')
idx = createDataPartition(iris$Species, p=0.7, list=F)
library(caret)
idx = createDataPartition(iris$Species, p=0.7, list=F)
iris_train <- iris[idx, ]
iris_test <-  iris[-idx, ]
table(iris_train$Species)
table(iris_test$Species)
library(rpart)
library(e1071)
library(randomForest)
rpart_tr <- rpart(Species~., data=iris_train)      # 의사결정나무 모델
bayes_tr <- naiveBayes(Species~., data=iris_train) # 나이브 베이지 모델
rf_tr <- randomForest(Species~., data=iris_train)  # 랜덤포레스트 모델
rpart_pdt <- predict(rpart_tr, newdata = iris_test, type='class')
bayes_pdt <- predict(bayes_tr, newdata = iris_test, tpye='class')
rf_pdt <- predict(rf_tr, nuewdata = iris_test, type='class')
rf_pdt <- predict(rf_tr, nuewdata = iris_test, type='response')
rf_pdt
bayes_pdt
rpart_pdt
table(iris_test$Species, rpart_pdt)
table(iris_test$Species, rpart_pdt)
table(iris_test$Species, bayes_pdt)
table(iris_test$Species, rf_pdt)
rf_tr <- randomForest(Species~., data=iris_train)  # 랜덤포레스트 모델
rf_pdt <- predict(rf_tr, nuewdata = iris_test, type='response')
table(iris_test$Species, rf_pdt)
rf_pdt
length(iris_test$Species)
rf_tr <- randomForest(Species~., data=iris_train)  # 랜덤포레스트 모델
rf_pdt <- predict(rf_tr, nuewdata = iris_test, type='response')
table(iris_test$Species, rpart_pdt)
table(iris_test$Species, bayes_pdt)
table(iris_test$Species, rf_pdt)
rf_pdt
rf_tr <- randomForest(Species~., data=iris_train)  # 랜덤포레스트 모델
rpart_pdt <- predict(rpart_tr, newdata = iris_test, type='class')
bayes_pdt <- predict(bayes_tr, newdata = iris_test, tpye='class')
rf_pdt <- predict(rf_tr, nuewdata = iris_test, type='response')
table(iris_test$Species, rpart_pdt)
table(iris_test$Species, bayes_pdt)
table(iris_test$Species, rf_pdt)
rf_pdt <- predict(rf_tr, nuewdata = iris_test, type='class')
table(iris_test$Species, rpart_pdt)
table(iris_test$Species, bayes_pdt)
table(iris_test$Species, rf_pdt)
rf_pdt <- predict(rf_tr, newdata = iris_test, type='response')
table(iris_test$Species, rpart_pdt)
table(iris_test$Species, bayes_pdt)
table(iris_test$Species, rf_pdt)
confusionMatrix(rpart_pdt, iris_test$Species)
# 혼동 행렬(Confusion Matrix)
confusionMatrix(rpart_pdt, iris_test$Species)
confusionMatrix(bayes, iris_test$Species)
confusionMatrix(rf_pdt, iris_test$Species)
confusionMatrix(bayes, iris_test$Species)
# 혼동 행렬(Confusion Matrix)
confusionMatrix(rpart_pdt, iris_test$Species)
confusionMatrix(bayes_pdt, iris_test$Species)
confusionMatrix(rf_pdt, iris_test$Species)
rocplot(rpart_pdt)
rocplot(rpart_tr)
rocplot(rf_tr)
rocplot(rpart_tr)
rocplot(model2)
rocplot(model)
model
# 혼동 행렬(Confusion Matrix)
confusionMatrix(rpart_pdt, iris_test$Species)
confusionMatrix(bayes_pdt, iris_test$Species)
confusionMatrix(rf_pdt, iris_test$Species)
# 혼동 행렬(Confusion Matrix)
confusionMatrix(rpart_pdt, iris_test$Species)
library(leaps)
install.packages('leaps')
library(leaps)
attitude
head(attitude
head(attitude)
cor(attitude)
plot(cor(attitude))
pairplot(cor(attitude))
out <- lm(rating~., data=rating)
out <- lm(rating~., data=attitude)
summary(out)
out2 <- step(out, direction = 'both')
summary(out2)
leaps <- regsubsets(rating~., data=attitude, nbest = 5)
leaps
summary(leaps)
plot(leaps)
plot(leaps, scale = 'bic')
out_bic <- lm(rating~compalnts, data=attitude)
head(attitude)
out_bic <- lm(rating~complaints, data=attitude)
summary(out_bic)
plot(out_bic, scale='Cp')
summary(out_cp)
out_cp <- lm(rating~complaints+learning, data=attitude)
summary(out_cp)
plot(leaps, scale = "adjr2")
out_adjr2 <- lm(rating ~ complaints+learning+advance)
out_adjr2 <- lm(rating ~ complaints+learning+advance, data=attitude)
summary(out_cp)
plot(leaps, scale = 'bic') # bic는 가장 적을수록 좋은 모형
out_bic <- lm(rating~complaints, data=attitude)
summary(out_bic)
plot(leaps, scale='Cp') # CP도 가장 적을수록 좋은 모형
out_cp <- lm(rating~complaints+learning, data=attitude)
summary(out_cp)
plot(leaps, scale = "adjr2")
out_adjr2 <- lm(rating ~ complaints+learning+advance, data=attitude)
summary(out_cp)
